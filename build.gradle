plugins {
    id 'java'

    id 'idea'
    id 'eclipse'

    id 'checkstyle'
    id 'pmd'
    id 'jacoco'

    id 'nebula.project' version '7.0.9'
    id 'nebula.info' version '8.1.0'
    id 'nebula.release' version '15.0.2'
    id 'nebula.source-jar' version '17.2.1'

    id 'org.springframework.boot' version '2.3.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    id 'org.asciidoctor.convert' version '2.4.0'

    id 'com.github.spotbugs' version '4.3.0'

    id 'com.gorylenko.gradle-git-properties' version '2.2.2'

    id 'com.github.ben-manes.versions' version '0.28.0'

    id 'io.freefair.lombok' version '5.1.0'
}

group = 'com.kakaobank.codingtest'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = sourceCompatibility

idea {
    project {
        jdkName = project.sourceCompatibility.name
        languageLevel = project.sourceCompatibility
    }
}

contacts {
    'aafwu00@gmail.com' {
        moniker 'Taeho Kim'
        role 'Developer'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

ext['spring-cloud.version'] = 'Hoxton.SR8'

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.ext['spring-cloud.version']}"
    }
}
dependencies {
    spotbugs 'com.github.spotbugs:spotbugs:4.0.3'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation 'org.zalando:problem-spring-web-starter:0.26.2'

    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.hibernate:hibernate-jcache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'com.github.ben-manes.caffeine:jcache'

    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'io.github.openfeign:feign-httpclient'

    runtimeOnly 'com.h2database:h2'
}


test {
    useJUnitPlatform()
    reports {
        html.enabled = true
    }
}

asciidoctor {
    dependsOn test
    attributes 'revnumber': "${project.version.toString()}"
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

checkstyle {
    toolVersion = '8.32'
    sourceSets = [project.sourceSets.main as SourceSet]
    configFile = rootProject.file('config/checkstyle/google_checks.xml')
    configProperties = ['checkstyle.regexp.header.file': "${rootProject.projectDir}/config/checkstyle/java_regexp.header"]
    maxErrors = 0
    maxWarnings = 0
}

pmd {
    toolVersion = '6.22.0'
    sourceSets = [project.sourceSets.main as SourceSet]
    ruleSetFiles = rootProject.files('config/pmd/rulesets.xml')
    ruleSets = []
    rulePriority = 3
}

spotbugs {
    toolVersion = '4.0.3'
    effort = 'max'
    reportLevel = 'high'
    spotbugsTest.enabled = false
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

check {
    finalizedBy 'jacocoTestReport'
}

gitProperties {
    dateFormat = 'yyyy-MM-dd HH:mm:ss'
    dateFormatTimeZone = 'Asia/Seoul'
}